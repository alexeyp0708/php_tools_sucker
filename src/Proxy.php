<?php

namespace Alpa\Tools\Sucker;

use Alpa\Tools\ProxyObject\Proxy as CoreProxy;

final class Proxy extends CoreProxy
{
    public function __construct($target, string $handlers=SuckerHandlers::class, ?string $scope = null)
    {
        if (!is_subclass_of($handlers, HandlersInterface::class)
        ) {
            throw new \Exception('argument 2: the object must implement interface' . HandlersInterface::class .
                ', or if class name, then the class must implement interface ' . HandlersInterface::class);
        }
        $handlers = new $handlers($target, $scope);
        parent::__construct($target, $handlers);
    }

    /**
     * @inheritDoc
     */
    protected function & run(string $action, ?string $prop = null, $value_or_arguments = null)
    {
        $result = & parent::run($action, $prop, $value_or_arguments);
        $this->handlers->restoreDefaultScope();
        return $result;
    }

    /**
     * Calling a proxy object to set the scope.
     * @param ...$arguments string $arguments[0]- parent class name . The scope of the object.
     * @return $this|mixed
     */
    public function & __invoke(...$arguments)
    {
        $scope = $arguments[0];
        $this->handlers->setScope($scope);
        return $this;
        //return parent::__invoke($arguments); // TODO: Change the autogenerated stub
    }
}